name: validate delta changes in PR

on:
  pull_request:
    branches:
      - QA

jobs:
  SFDX-CLI-Deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - run: echo "🐧 GitHub Action running on ${{ runner.os }}"

      - run: echo "🔎 Retrieving Dev Branch from ${{ github.repository }}."

      - uses: actions/checkout@v4
        with:
          ref: QA

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Salesforce CLI
        run: |
          npm install -g @salesforce/cli
          sf --help
          pip install xq
          pip install yq

      - name: Authenticate to Salesforce
        run: |
          echo ${{ secrets.SF_AUTH_URL }} > sfdx-auth-url.txt
          sfdx auth:sfdxurl:store --sfdx-url-file sfdx-auth-url.txt

      - name: Debug Test Classes File
        run: cat test-classes.txt

      - name: Read Test Class Names from File
        id: read-test-classes
        run: |
          TEST_CLASSES=$(cat test-classes.txt | tr '\n' ' ')
          if [ -z "$TEST_CLASSES" ]; then
            echo "TEST_CLASSES=" >> $GITHUB_ENV
            echo "RUN_TESTS=false" >> $GITHUB_ENV
          else
            echo "TEST_CLASSES=$TEST_CLASSES" >> $GITHUB_ENV
            echo "RUN_TESTS=true" >> $GITHUB_ENV
          fi

      - name: Install sfdxGitDelta
        run: |
          echo y | sf plugins install sfdx-git-delta

      - name: Generate Delta between Dev and PR Branch
        run: |
          # Generate the delta changes between the base branch and the head of the PR
          sf sgd source delta --to "HEAD" --from "origin/QA" --output "." --ignore .github/workflows/ignore.txt
          cat package/package.xml  # Output the generated package.xml for debugging

      - name: Debug Environment Variables
        run: |
          echo "TEST_CLASSES=${{ env.TEST_CLASSES }}"
          echo "RUN_TESTS=${{ env.RUN_TESTS }}"

      - name: Validate Delta Components with Specified Tests
        if: ${{ env.RUN_TESTS == 'true' }}
        run: |
          if [ -z "${{ env.TEST_CLASSES }}" ]; then
            echo "No test classes specified. Exiting."
            exit 1
          fi
          echo "Running specified tests: ${{ env.TEST_CLASSES }}"
          # Loop through each test class and add the --tests flag
          TEST_FLAGS=$(echo ${{ env.TEST_CLASSES }} | tr ' ' '\n' | awk '{print "--tests", $0}')
          sf project deploy validate --manifest package/package.xml --test-level RunSpecifiedTests $TEST_FLAGS --target-org jp@sunsolutions.com

      - name: Validate Delta Components with Local Tests
        if: ${{ env.RUN_TESTS == 'false' }}
        run: |
          echo "No specific tests found, running all local tests."
          sf project deploy validate --manifest package/package.xml --test-level RunLocalTests --target-org jp@sunsolutions.com

      - name: Set Validation Success Status
        id: set-status
        run: |
          echo "Setting validation success status..."
          echo "VALIDATION_SUCCESS=true" >> $GITHUB_ENV

      - name: Handle Validation Failure
        if: failure()
        run: |
          echo "Validation failed. Disabling Quick Deploy button."
          # Here, you would integrate with your tool's API or system to disable the Quick Deploy button.
          # This is a placeholder for the API call or script needed.
          echo "VALIDATION_SUCCESS=false" >> $GITHUB_ENV

      - name: Finalize Workflow
        run: |
          if [ "${{ env.VALIDATION_SUCCESS }}" == "true" ]; then
            echo "Validation passed. Proceeding with the workflow."
          else:
            echo "Validation did not pass. Stopping the workflow."
            exit 1
